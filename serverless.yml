service: MySpotApi
plugins:
    - serverless-plugin-typescript
    - serverless-plugin-optimize
    - serverless-offline

provider:
    name: aws
    runtime: nodejs14.x
    region: ap-northeast-2
    endpointType: REGIONAL
    stackName: ${self:service}-${self:provider.stage}
    apiName: ${self:service}-${self:provider.stage}
    memorySize: 512
    timeout: 10
    tracing:
        lambda: true
    deploymentBucket: myspot-serverless-deployment
    deploymentPrefix: myspot
    environment:
        NODE_ENV: production
        stage: ${self:provider.stage} # process.env.stage, deploy stage option을 따른다.
        POSTGRES_USERNAME: ${self.custom.env.dev.database.username}
        POSTGRES_PORT: ${self.custom.env.dev.database.port}
        POSTGRES_HOST: ${self.custom.env.dev.database.host}
        POSTGRES_PASSWORD: ${self.custom.env.dev.database.password}
        POSTGRES_DATABASE: ${self.custom.env.dev.database.database}
        JWT_SECRET: ${self.custom.env.dev.jwt}

    lambdaHashingVersion: 20201221

package:
    individually: true

custom:
    env:
        - dev: ${file(./src/configuration.${opt:alias, 'dev'}.json)}
    cors:
        origin: '*'
        headers: '*'
        allowCredentials: false
    deploymentSettings:
        type: AllAtOnce # shifts all the traffic to the new version, useful when you only need to execute the validation hooks.
        alias: ${self.custom.stage}

functions:
    common: # lambda function name
        handler: src/common/lambda.handler
        events:
            - http:
                  method: get
                  path: /common/status
                  cors: ${self.custom.cors}

    map:
        handler: src/map/lambda.handler
        events:
            - http:
                  method: get
                  path: /map
                  cors: ${self.custom.cors}
            # - http:
            #       method: post
            #       path: /map
            #       cors: ${self.custom.cors}
            #       authorizer:
            #           name:
            #               verify-token
            #               # this tells the lambda where to take the information from,
            #               # in our case the HTTP Authorization header
            #           identitySource: method.request.header.Authorization
            #           resultTtlInSeconds: 3600 # cache the result for 1 hour
            # - http:
            #       method: delete
            #       path: /map/{mapId}
            #       cors: ${self.custom.cors}
            #       authorizer:
            #           name:
            #               verify-token
            #               # this tells the lambda where to take the information from,
            #               # in our case the HTTP Authorization header
            #           identitySource: method.request.header.Authorization
            #           resultTtlInSeconds: 3600 # cache the result for 1 hour
            # - http:
            #       method: get
            #       path: /map/recent
            #       cors: ${self.custom.cors}
            #       authorizer:
            #           name:
            #               verify-token
            #               # this tells the lambda where to take the information from,
            #               # in our case the HTTP Authorization header
            #           identitySource: method.request.header.Authorization
            #           resultTtlInSeconds: 3600 # cache the result for 1 hour
            # - http:
            #       method: post
            #       path: /map/recent/{recentMapId}
            #       cors: ${self.custom.cors}
            #       authorizer:
            #           name:
            #               verify-token
            #               # this tells the lambda where to take the information from,
            #               # in our case the HTTP Authorization header
            #           identitySource: method.request.header.Authorization
            #           resultTtlInSeconds: 3600 # cache the result for 1 hour
            # - http:
            #       method: delete
            #       path: /map/recent/{recentMapId}
            #       cors: ${self.custom.cors}
            #       authorizer:
            #           name:
            #               verify-token
            #               # this tells the lambda where to take the information from,
            #               # in our case the HTTP Authorization header
            #           identitySource: method.request.header.Authorization
            #           resultTtlInSeconds: 3600 # cache the result for 1 hour
